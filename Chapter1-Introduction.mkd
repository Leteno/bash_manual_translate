#前言

##什么是Bash？
对于GNU操作系统来说，Bash是一种shell，或者是命令行语言解释程序。这个名字是由‘Bourne-Again SHell’简写而来，而Bourne指代Stephen Bourne，目前Unix shell的祖先，sh的作者，而sh则出现在贝尔实验室研究版第七版的Unix系统中。

Bash极大地兼容sh，吸收了Korn shell(ksh), C shell(csh)的一些有用的功能，旨在成为IEEE提出的POSIX规范中的 标准化shell以及工具(POSIX Shell and Tools) 符合这一规范的shell工具。它在sh基础上，在用户交互以及编程方面，提供了一写功能上的改善。

GNU操作系统当然也会提供其他的shell程序(比如csh)，Bash是默认shell。跟其他的GNU软件一样，Bash也是具有很高的可移植性（portable）它可以运行在几乎所有版本的Unix等操作系统上，甚至是MS-DOS，OS/2， 以及Windows平台上。


##什么是shell？
本来，shell程序只是执行命令的一个微处理器。微处理器意味着支持由文字，符号组成的更大的表达式。

Unix shell，既是一个命令解释型程序，也是一种编程语言。作为命令解释型程序，shell给用户提供了接口去使用GNU的工具程序(GNU utilities)。shell又是一种编程语言，在这里面支持用户”拼凑“这些工具程序(也就是命令)，以实现某些用户想要的功能A，而编写出来的程序又成为新的命令(比如在实现功能A基础上添加B的功能可以使用这个新命令作为拼凑元件)。这些存放在/bin等系统目录($PATH)下的新命令，跟与之同目录的系统文件一样，组成了用户去执行命令的环境，命令行上下文。

Shell可以交互式或者非交互式使用。譬如，程序通过接受键盘输入，与用户交互；shell也可以只是执行从文件读取到的命令行，并没有与用户交互。

Shell允许同步或者异步执行GNU命令。比如，shell等待命令执行结束前不接受任何输入，shell也可以在一个异步程序未结束的同时读并执行额外的命令。重定向允许对这些命令的输入输出做出细粒度的控制。还有，shell允许对命令行执行环境上下文的控制。

Shell也提供了一部分内置命令(built-in)，去实现通过其他工具程序无法提供的或是使用起来不方便的功能。例如，命令cd break continue，exec，这些命令不能脱离shell使用，因为这些命令本身就直接操作在shell上的。命令history，getopts，kill，pwd，是可以被其他工具程序使用，但是没shell使用起来方便。这些命令在后面的章节将会详细地讲。

不仅仅是能执行命令，shell最大的威力(或者说复杂性)在于它内嵌的编程语言。跟其他高级语言一样，shell语言提供了变量，控制流程，引用(quoting)，以及函数。

Shell将功能组合在一起完成交互式功能，而不是去往编程语言里面新增其他东西。这些交互式功能包括作业控制，命令行编辑，命令行历史记录，以及别名。这些功能将会在本手册中详细说明。

