#Shell基本功能
Bash是’Bourne-Again SHell‘的简写。Bourne shell是原始的Unix shell，由Stephen Bourne编写的。所有的Bourne shell内置命令都可以在Bash中使用。”“{The rules for evaluation and quoting are taken from the POSIX specification for the 'standard' Unix shell}

这一章主要概括shell的基石：命令，控制结构，shell函数，shell参数，“shell扩展”{shell expansion}， 重定向(重定向输入输出，读取或写入到文件), 以及一个shell程序怎么执行命令。

##3.1 shell 语法
shell程序读取命令，执行一系列操作。如果读取到’#‘，它会认为这是一个注释，会忽略‘#’到行尾的所有内容。

粗略的来说，shell程序边读取输入(译：可以把整个sh文件看做输入流)边将输入区分成单词以及操作符，通过判断这些字符单词是否被注释化，决定该赋予这些单词以什么样的含义（译：比如保留字，被引号括起来的保留字）(译：整个过程是词法分析？)

shell程序将词法分析得来的词解析成命令以及其他结构(译：语法分析？)”有删除关于已知单词字符的特定意义“{removes the special meaning of certain words or characters}(译：unset？)也有扩展某些单词字符的含义，有重定向输入输出流，也有执行某些特定的命令，等待某些命令的退出返回值(exit status)，也有让这个退出返回值传递给后续的程序。

###3.1.1 Shell 操作
下面就是当shell程序读取并执行命令的时候，关于shell操作大致的描述。shell程序主要做如下步骤：

* 1.读取输入，从文件(看3.8节[Shell Scripts])，从字符串（来自 -c 的参数），从用户终端(terminal)
* 2.将输入切分为单词、操作符(词法分析)，切分遵循3.1.2节[Quoting]介绍的规则。这些切分的块(token)用锚字符(metacharacter)分隔，别名扩展替换(Alias expansion)在这一步执行。
* 3.将这些块(token)解析成单一的或者组合的命令(详见3.2节[Shell Commands])（语法分析）
* 4.执行shell扩展(shell expansion)(详见3.5节[Shell Expansions])"将这些块区分成文件名列表(详见3.5.8节[Filename Expansion])命令以及参数"{breaking the expanded tokens into lists of filenames and commands and arguments}
* 5.执行必要的重定向(详见3.6节[Redirections])，从命令的参数列表中删除重定向操作符以及重定向的位置
* 6.执行命令(详见3.7节[Executing Commands])
* 7.(可选)等待命令执行结束，收集退出结束状态(exit status)(详见3.7.5节[Exit Status])

###3.1.2 注释化(quoting)
注释化(quoting)是用来移除某些字符单词在shell程序中的特殊含义。譬如，用引号可以将某些特殊字符、单词、保留字的含义去掉，单纯是字符串，也用在防止传入的参数过分解读(译：形如 echo "ls 这里不会执行")

每一个shell锚字符(详见第二章[Definitions])在shell中有特别含义，如果想单纯地表示这个字符，也可以用引号括起来。当使用命令 history 扩展功能时(详见9.3节[History Interaction])，history扩展符，通常是'!'，必须要用引号括起来(详见9.1节[Bash Histroy Facilities])

有很多注释化方法：转义字符'\', 单引号'\'', 双引号'\"'

####3.1.2.1 转义字符(Escape Character)
'\'保留了下一个字符的字面意思。如果'\'后接换行符的话，而且’\'本身没有被注释化("\\")那么这一行将视为未换行，下一行则是这一行后续的补充，也就是说，把换行符从意义上删除掉(译：但是在编辑器中按照有换行符来排列，看起来舒服)

####3.1.2.2 单引号(Single Quotes)
所有被单引号'括起来的字符都只保留字面意思，通常在单引号内不会出现单引号，不过也可以通过反斜线'\'转义一下，例如 '\''

####3.1.2.3 双引号(Double Quotes)
所有被双引号""括起来的字符也都只保留字面意思，除了 &dollar; `` \ 以及命令history 扩展打开时的 !. 如果shell程序处于POSIX模式下(详见6.11节[Bash POSIX Mode])! 在双引号下并没有其他特殊含义，即使是命令 history 的扩展打开。字符&dollar; ` 在双引号下仍然保留自身特殊含义。反斜线只有在下列字符前才有特殊含义 &dollar; ` " \ 以及换行符.反斜线可以使得这些字符失去特殊意义。双引号也可以通过被双引号括起来，通过在其前方加入反斜线。

特殊参数 '*' '@' 就算在双引号下也保留特殊意思(详见3.5.3节[Shell Parameter Expansion])

####3.1.2.4 ANSI-C标准的注释化(ANSI-C Quoting)
形如$’string‘的单词将会被特别对待，它会解析string，字符串内带有转义字符的字符将会通过ANSI-C标准进行替换。替换规则如下：

|code&nbsp;&nbsp;&nbsp;|meaning|
|:-------|:----|
|\a|蜂鸣(alert bell)|
|\b|退格符|
|\e \E|转义字符(not ANSI C?)|
|\f|换页符|
|\n|换行符|
|\r|回车符|
|\t|水平制表符|
|\v|垂直制表符|
|\\|反斜线|
|\'|单引号|
|\"|双引号|
|\?|问号|
|\nnn|nnn是八进制数字，如/172 ='z'|
|\xHH|HH是16进制数字，如/x7A = 'z'|
|\uHHHH|Unicode编码下的字符，HHHH是16进制数字|
|\UHHHHHHHH|Unicode编码下的字符，HHHH,HHHH是8进制数字|
|\cx|control-x字符|

解析的结果是单括号括起来的内容，$不会被输出，就如同它未曾出现一样(译：可以试一下 "echo &dollar;'hello\n'" 与 "echo 'hello\n'"，一切明了)

####3.1.2.5 翻译(Locale-Specific Translation)
&dollar;"string"则会导致这个string根据当前的语言翻译，如果当前的语言是C或者POSIX，&dollar;符号会被忽略。"如果string被翻译，其结果将包含双引号"{If the string is translated and replaced, the replacement is double-quoted}

Some systems use the message catalog selected by the LC_MESSAGES shell variable. Others create the name of the message catalog from the value of the TEXTDOMAIN shell variable, possibly adding a suffix of '.mo'.If you use the TEXTDOMAIN variable, you may need to set the TEXTDOMAINDIR variable to the location of the message catalog files. Still other use both variables in this fashion: TEXTDOMAINDIR/LC_MESSAGES?LC_MESSAGES/TEXTDOMAIN.mo

###3.1.3 注释(Comments)
在不支持交互的shell或者支持交互的但是s内置命令shopt interactive_comments选项被打开(详见4.3.2[The Shopt Builtin])，对于以'#'开始的字符都会导致该字符以及后续字符知道到下一行都会被忽略。交互式shell程序如果interactive_comments关闭的话，不支持注释。选项interactive_comments默认在交互式shell是打开的(详见6.3节[Interactive Shells])去看什么导致一个shell程序可交互。

##3.2 Shell 命令(Shell Commands)

一个单一的shell命令，形如'echo a b c',包含了shell命令，接着是参数，中间用空格隔开[.]("A simple shell command such as 'echo a b c' consists of the command itself followed by arguments, separated by spaces.")

更加复杂的shell命令是由多个单一命令，通过下面这些方式组合在一起:管道，使得一个命令的输出成下一个命令的输入；循环语句或条件语句；以及其他[=。=]("More complex shell commands are composed of simple commands arranged together in a variety of ways: in a pipeline in which the output of one command becomes the input of a second, in a loop or conditional construct, or in some other grouping.")

###3.2.1 简单命令(Simple Commands)

一个单一命令是最常见的命令[.]("A simple command is the kind of command encountered most often.")  它仅仅是一串单词中间用空白(' '或'\t')隔开，由shell控制字符隔开(详见 [Definitions])[.]("It's just a sequence of words separated by 'blank's, terminated by one of the shell's control operators (*note Definitions::). ") 第一个单词表示要执行的命令名，剩下的单词成为这个命令的参数列表[.]("The first word generally specifies a command to be executed, with the rest of the words being that command's arguments.")

命令执行结束返回状态(详见[Exit Status])等于它的退出结束状态，由POSIX 1003.1 标准中，函数waitpid返回得到，或者是由于信号(signal)N导致程序退出，此时返回值为128+N[.]("The return status (*note Exit Status::) of a simple command is its exit status as provided by the POSIX 1003.1 'waitpid' function, or 128+N if the command was terminated by signal N.")

###3.2.2 管道(Pipeline)
管道是由同一个或多个命令组成，中间用'|'或'|&'隔开[.]("A 'pipeline' is a sequence of one or more commands separated by one of the control operators '|' or '|&'.")

管道的标准格式是[:]("The format for a pipeline is")

[time [-p]] [!] COMMAND1 [ | or |& COMMAND2 ] ...

通过管道，每一个命令的输出作为下一个命令的输入[.]("The output of each command in the pipeline is connected via a pipe to the input of the next command.")  也就是说，每一个命令从上一个命令中读取输入[.]("That is, each command reads the previous command's output.") [.]("This connection is performed before any redirections specified by the command.")

如果是使用'|&', 那么COMMAND1的标准错误输出跟命令的标准输出一起，通过管道，传递给命令COMMAND2作为它的标准输入，全称应该是'2>&1 |'[.]("If '|&' is used, COMMAND1's standard error, in addition to its standard output, is connected to COMMAND2's standard input through the pipe; it is shorthand for '2>&1 |'.")  只要在命令后面加入这个符号就意味着将标准错误输出(重定向)到标准输出中去[.]("This implicit redirection of the standard error to the standard output is performed after any redirections specified by the command.")(译：这就意味着，标准错误汇入标准输出，然后再由管道'|'，将混合了标准错误的标准输出作为下一方的标准输入)

保留字'time'表示在整个命令结束的时候做时间上的统计[.]("The reserved word 'time'causes timing statistics to be printed for the pipeline once it finishes.") 这个统计包括整个命令执行的真实时间，用户CPU时间以及系统CPU时间[.]("The statistics currently consist of elapsed (wall-clock) time and user and system time consumed by the command's execution.")  -p 选项的作用是将time命令输出的结果按POSIX要求的格式输出[.]("The '-p' option changes the output format to that specified by POSIX.") 当shell程序处于POSIX模式下(详见[Bash POSIX Mode]), 它并不会将time认为是保留字(译:而认为是外部命令,详见本段段末)，如果后面接着'-'的话[.]("When the shell is in POSIX mode (*note Bash POSIX Mode::), it does not recognize 'time' as a reserved word if the next token begins with a '-'.")  环境变量'TIMEFORMAT'可以定义time输出信息的格式(关于格式化变量，详见[Bash Variables])[.]("The 'TIMEFORMAT' variable may be set to a format string that specifies how the timing information should be displayed.  *Note Bash Variables::, for a description of the available
formats.") time作为一个保留字，提供了给shell内置程序，shell函数，管道一个记录运行时间的方法[.]("The use of 'time' as a reserved word permits the timing of shell builtins, shell functions, and pipelines.")  (译:如果time不是保留字,而是)作为一个外部命令的话，可能就没法这么方便的计算时间了[.]("An external 'time' command cannot time these easily.")

当shell程序处在POSIX模式下(详见[Bash POSIX Mode]), 'time'可能会后接换行符[.]("When the shell is in POSIX mode (*note Bash POSIX Mode::), 'time' may be followed by a newline.") 在这种状态下，time会计算整个程序以及相关子程序总的运行时间[.]("In this case, the shell displays the total user and system time consumed by the shell and its children.") 在这个情况下，变量'TIMEFORMAT'可以标示这个时间输出的格式[.]("The 'TIMEFORMAT' variable may be used to specify the format of the time
information.")

如果管道并不是异步执行命令的话，shell程序将会等待管道内的程序(译:一个个)执行完毕[.]("If the pipeline is not executed asynchronously (*note Lists::), the shell waits for all commands in the pipeline to complete.")

管道内的每一个命令都会在它自己的子shell程序中执行(译:也就是命令内部的变量环境不会污染到其他命令的环境)(详见[Command Execution Environment])[.]("Each command in a pipeline is executed in its own subshell (*note Command Execution Environment::).") 整个管道的结束状态是最后一个命令的结束状态,除非将'pipefail'选项打开(详见[The Set Builtin])[.]("The exit status of a pipeline is the exit status of the last command in the pipeline, unless the 'pipefail' option is enabled (*note The Set Builtin::).")如果打开'pipefail',管道会返回0，如果所有命令成功退出的话，否则是一个非0的结束状态码[.]("If 'pipefail' is enabled, the pipeline's return status is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands exit successfully.") 如果保留字'!'出现在整个管道的前面，则是对结束状态码逻辑非了[.]("If the reserved word '!' precedes the pipeline, the exit status is the logical negation of the exit status as described above.") shell程序会等待管道内所有程序结束才会输出返回值[.]("The shell waits for all commands in the pipeline to terminate before returning a value.")
